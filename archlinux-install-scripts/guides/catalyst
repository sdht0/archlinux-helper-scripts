 Installing the driver
Installing from the unofficial repository

If you don't fancy building the packages from the AUR, this is the way to go. The repository is maintained by our unofficial Catalyst maintainer, Vi0L0. All packages are signed and are considered safe to use. As you will see later on in this article, Vi0L0 is also responsible for many other packages that will help you get your system working with your ATI graphic cards.

Vi0L0 has three different Catalyst repositories, each having different drivers:

    [catalyst]; for the regular Catalyst driver needed by Radeon HD 5xxx and up, it contains the latest (stable or beta) Catalyst release;
    [catalyst-stable]; for the regular Catalyst driver needed by Radeon HD 5xxx and up, with the latest stable driver;
    [catalyst-hd234k]; for the legacy Catalyst driver needed by Radeon HD 2xxx, 3xxx and 4xxx cards.

Warning: The legacy Catalyst driver does not support Xorg 1.13. Should you want to use this driver, see #Xorg repositories for instructions on how to roll back to Xorg 1.12.
Note: The beta Catalyst driver 13.6 does support Xorg 1.14 now.

To enable one of these, you will have to edit /etc/pacman.conf and add the repository of choice's information above all other repositories in /etc/pacman.conf.

    For [catalyst], add:

[catalyst]
Server = http://catalyst.wirephire.com/repo/catalyst/$arch

    For [catalyst-stable], add:

[catalyst-stable]
Server = http://catalyst.wirephire.com/repo/catalyst/$arch

    For [catalyst-hd234k], add:

[catalyst-hd234k]
Server = http://catalyst.wirephire.com/repo/catalyst-hd234k/$arch

You must also add Vi0L0's GPG key so that pacman trusts the repositories.

# pacman-key --keyserver pgp.mit.edu --recv-keys 0xabed422d653c3094
# pacman-key --lsign-key 0xabed422d653c3094

Tip: Because catalyst.wirephire.com will go down if a certain bandwidth limit is exceeded (this happened in the past) or may be too slow at your location, repository mirrors are provided by yanom at [1] (USA) and rtsinformatique at [2] (France). These mirrors however come with no warranty and are not guaranteed to always be operational:

[catalyst]
#Server = http://70.239.162.206/catalyst-mirror/repo/catalyst/$arch
#Server = http://mirror.rts-informatique.fr/archlinux-catalyst/repo/catalyst/$arch

[catalyst-stable]
#Server = http://70.239.162.206/catalyst-mirror/repo/catalyst/$arch
#Server = http://mirror.rts-informatique.fr/archlinux-catalyst/repo/catalyst/$arch

[catalyst-hd234k]
#Server = http://70.239.162.206/catalyst-mirror/repo/catalyst-hd234k/$arch
#Server = http://mirror.rts-informatique.fr/archlinux-catalyst/repo/catalyst-hd234k/$arch

(uncomment the line for the mirror closest to your location - it is a good idea to keep alternatives in case of mirror downtime)

Repository mirroring can be easily achieved using rsync://mirror.rts-informatique.fr::archlinux-catalyst

Once you have done this, update pacman's database and install the packages:

# pacman -Syu
# pacman -S catalyst catalyst-utils

Note: If pacman asks you about removing libgl you can safely do so.
Warning: Catalyst from Vi0L0's repository is compiled against one kernel and one kernel only. For Vi0L0, it's getting more and more difficult to keep up with kernel's pace and as such, we have seen a lot of users asking for what to do in the forums. Often, the solution is to a) wait for Vi0L0 to rebuilt the Catalyst package against those newer versions, b) do so yourself or c) hold back the Linux kernel update. The easiest solution is to do so yourself, not manually, but by using Vi0L0's excellent #Catalyst-hook.

If you are on 64-bit and also need 32-bit OpenGL support:

# pacman -S lib32-catalyst-utils

Repositories also contain other packages, that can replace the catalyst package:

    catalyst-generator; this package is able to generate fglrx modules packed into pacman compliant packages - most secure and KISS-compatible package in this side-note, although it has to be operated manually. It's described in #Catalyst-generator
    catalyst-hook; a systemd service which will automatically update the fglrx module whilst the system shuts down or reboots. It's described in #Catalyst-hook

You will find more details about those packages in #Tools. Lastly, both repositories also contain the xvba-video package, which enables video acceleration, described in #Video acceleration, the AMDOverdriveCtrl package, which is a GUI to control over- and underclocking, also described in #GPU/Mem frequency, Temperature, Fan speed, Overclocking utilities, and a pack of tools for OpenCL/OpenGL developers, described in #OpenCL and OpenGL development
Installing from the AUR

The second way to install Catalyst is from the AUR. If you want to built the packages specifically for your computer, this is your way to go. Note that this is also the most tedious way to install Catalyst; it requires the most work and also requires manual updates upon every kernel update.
Warning: If you install the Catalyst package from the AUR, you will have to rebuild Catalyst every time the kernel is updated. Otherwise X will fail to start.

All packages mentioned above in Vi0L0's unofficial repository are also available on the AUR:

    catalyst;
    catalyst-generator;
    catalyst-hook;
    catalyst-utils;
    lib32-catalyst-utils;

The AUR also holds some packages that are not found in any of the repositories. These packages contain the so-called Catalyst-total packages and the beta versions:

    catalyst-total;
    catalyst-total-pxp;
    catalyst-total-hd234k;
    catalyst-test;

The catalyst-total packages are made to make the lives of AUR users easier. It builds the driver, the kernel utilities and the 32 bit kernel utilities. It also builds the catalyst-hook package, which is explained briefly above and in more detail in its own section below.

catalyst-total-pxp builds Catalyst with experimental powerXpress support.
Installing directly from AMD
Warning: Using the installer from ati.com/amd.com is not recommended! It may cause file conflicts and X failures and you will miss Arch-specific fixes. You must be familiar with booting to the command-line if you wish to attempt this.
Note: If you have attempted a manual install from the official installer and cannot recover your desktop:

# /usr/share/ati/fglrx-uninstall.sh

1. Download the installer from AMD or elsewhere (whereas *-* will be the version): ati-driver-installer-*-*-x86.x86_64.run

2. Make sure it's executable: # chmod +x ati-driver*

3. Ensure you're using a basic video driver like vesa and remove conflicting drivers (i.e. xf86-video-ati) with pacman.

4. Symlink /usr/src/linux to /usr/src/{kernelsource}. 64-bit users also symlink/usr/lib64 to /usr/lib.

5. Be sure to have your build environment setup: install base-devel and linux-headers.

6. Now run # ./ati-driver-installer-*-*-x86.86_64.run (Files will extract to a temporary folder and scripts will run...)

7. Assuming nothing went horribly wrong, check /usr/share/ati/fglrx-install.log for issues. There should also be a /lib/modules/fglrx/make.{ker_version}.log
Note: If you modify the make scripts, save to a different filename. Otherwise uninstall will not complete successfully.
Configuring the driver

After you have installed the driver via your chosen method, you will have to configure X to work with Catalyst. Also, you will have to make sure the module gets loaded at boot. Also, one should disable kernel mode setting.
Configuring X

To configure X, you will have to create an xorg.conf file. Catalyst provides its own aticonfig tool to create and/or modify this file. It also can configure virtually every aspect of the card for it also accesses the /etc/ati/amdpcsdb file. For a complete list of aticonfig options, run:

# aticonfig --help | less

Warning: Use the --output option before committing to /etc/X11 as an xorg.conf file will override anything in /etc/X11/xorg.conf.d
Note: If you want to adhere to the new xorg.conf.d: Append your aticonfig string with --output so that you can adapt the Device section to /etc/X11/xorg.conf.d/20-radeon.conf. The drawback of this is that many aticonfig options rely on an xorg.conf, and thus will be unavailable.

Now, to configure Catalyst. If you have only one monitor, run this:

# aticonfig --initial

Note: If you have a PowerXpress problem you should probably install catalyst-total-pxp.

However, if you have two monitors and want to use both of them, you can run the command stated below. Note that this will generate a dual head configuration with the second screen located above the first screen.

# aticonfig --initial=dual-head --screen-layout=above

Note: See #Double Screen (Dual Head / Dual Screen / Xinerama) for more information on setting up dual monitors.

You can compare the generated file to one of the Sample Xorg.conf examples listed on the Xorg page.

Although the current Xorg versions auto-detect most options when started, you may want to specify some in case the defaults change between versions.

Here is an example (with notes) for reference. Entries with '#' should be required, add entries with '##' as needed:

Section "ServerLayout"
        Identifier     "Arch"
        Screen      0  "Screen0" 0 0          # 0's are necessary.
EndSection
Section "Module"
        Load ...
        ...
EndSection
Section "Monitor"
        Identifier   "Monitor0"
        ...
EndSection
Section "Device"
        Identifier  "Card0"
        Driver      "fglrx"                         # Essential.
        BusID       "PCI:1:0:0"                     # Recommended if autodetect fails.
        Option      "OpenGLOverlay" "0"             ##
        Option      "XAANoOffscreenPixmaps" "false" ##
EndSection
Section "Screen"
        Identifier "Screen0"
        Device     "Card0"
        Monitor    "Monitor0"
        DefaultDepth    24
        SubSection "Display"
                Viewport   0 0
                Depth     24                        # Should not change from '24'
                Modes "1280x1024" "2048x1536"       ## 1st value=default resolution, 2nd=maximum.
                Virtual 1664 1200                   ## (x+64, y) to workaround potential OGL rect. artifacts/
        EndSubSection                               ## fixed in Catalyst 9.8
EndSection
Section "DRI"
        Mode 0666                                   # May help enable direct rendering.
EndSection

Note: With every Catalyst update you should remove amdpcsdb file in this way: kill X, remove /etc/ati/amdpcsdb, start X and then run amdcccle - otherwise the version of Catalyst may display wrongly in amdcccle.

If you need more information on Catalyst, visit this thread.
Loading the module at boot

We have to blacklist the radeon module to prevent it from auto-loading. To do so, blacklist radeon in /etc/modprobe.d/modprobe.conf. Also, make sure that it is not loaded by any file under /etc/modules-load.d/. For more information, see kernel modules#Blacklisting.

Then we will have to make sure that the fglrx module gets auto-loaded. Either add fglrx on a new line of an existing module file located under /etc/modules-load.d/, or create a new file and add fglrx.
Disable kernel mode setting

Disabling kernel mode setting is important, as the driver doesn't take advantage of KMS yet. If you do not deactivate KMS, your system might freeze when trying to switch to a tty or even when shutting down via your DE.

To disable kernel mode setting, add nomodeset to your kernel parameters. For example:

    For GRUB Legacy, edit menu.lst and add nomodeset to the kernel line:

kernel /boot/vmlinuz-linux root=/dev/sda1 ro nomodeset

    For GRUB, edit /etc/default/grub and add nomodeset to GRUB_CMDLINE_LINUX:

GRUB_CMDLINE_LINUX="nomodeset"

    Then run, as root:

# grub-mkconfig -o /boot/grub/grub.cfg

    For Syslinux, edit /boot/syslinux/syslinux.cfg and add nomodeset to the APPEND line, e.g.:

APPEND root=/dev/sda2 ro nomodeset

Checking operation

Assuming that a reboot to your login was successful, you can check if fglrx is running properly with the following commands:

$ lsmod | grep fglrx
$ fglrxinfo

If you get output, it works. Finally, run X with startx or by using GDM/KDM and verify that direct rendering is enabled by running the following command in a terminal:

$ glxinfo | grep "direct rendering"

If it says "direct rendering: yes" then you're good to go! If the glxinfo command is not found install the mesa-demos package.
Note: You can also use:

$ fgl_glxgears

as the fglrx alternative test to glxgears.
Warning: In recent versions of Xorg, the paths of libs are changed. So, sometimes libGL.so cannot be correctly loaded even if it's installed. Check this if your GL is not working. Please read "Troubleshooting" section for details.

If you have trouble, see #Troubleshooting.
Custom kernels
Note: If you are at all uncomfortable or inexperienced with making packages, read up the ABS wiki page first so things go smoothly.

To install catalyst for a custom kernel, you'll need to build your own catalyst-$kernel package:

    Obtain the PKGBUILD and catalyst.install files from Catalyst.
    Editing the PKGBUILD. Two changes need to be made here:
        Change pkgname=catalyst to pkgname=catalyst-$kernel_name, where $kernel_name is whatever you want (e.g. custom, mm, themostawesomekernelever).
        Change the dependency of linux to $kernel_name.
    Build your package and install; run makepkg -i or makepkg followed by pacman -U pkgname.pkg.tar.gz

Note:

    If you run multiple kernels, you have to install the Catalyst-utils packages for all kernels. They won't conflict with one another.
    Catalyst-generator is able to build catalyst-{kernver} packages for you so you do not actually need to perform all those steps manually. For more information, see Tools section.

PowerXpress support

PowerXpress technology allows switching notebooks with dual-graphic capability from integrated graphics (IGP) to discrete graphics either to increase battery life or to achieve better 3D rendering capabilities.

To use such functionality on Arch you will have to:

    Get and build catalyst-total-pxp package from the AUR, or
    Install catalyst-utils-pxp package from the [catalyst] repository (plus additional lib32-catalyst-utils-pxp, if needed).

To perform a switch into Intel's IGP you will also have to install the mesa-libgl package and Intel's drivers: xf86-video-intel and intel-dri.
Note: With the latest version of Catalyst, version 13.1 (not Catalyst legacy) ChrisXY was able to work on the newest xorg-server (version 1.13.1), mesa 9.0.1 and xf86-video-intel 2.20.18.

On any version of Catalyst below 13.1 (and all versions of Catalyst legacy) there are some problems with the new Intel drivers and the last noted working version of xf86-video-intel is 2.20.2-2, so you will probably have to downgrade from the latest version that you have gotten from Arch's repositories (although we recommend to test the newest one before downgrading - there's always some possibility that it will work).
xf86-video-intel 2.20.2-2 works only with xorg-server 1.12 and so it is a part of the xorg112 repository. If you want to use it you will have to downgrade xorg-server as well. For information on this, see #Xorg repositories.

Now you can switch between the integrated and the discrete GPU, using these commands:

# aticonfig --px-igpu    #for integrated GPU
# aticonfig --px-dgpu    #for discrete GPU

Just remember that fglrx needs /etc/X11/xorg.conf configured for AMD's card with 'fglrx' inside.

You can also use the pxp_switch_catalyst switching script that will perform some additional usefull operations:

    Switching xorg.conf - it will rename xorg.conf into xorg.conf.cat (if there's fglrx inside) or xorg.conf.oth (if there's intel inside) and then it will create a symlink to xorg.conf, depending on what you chose.
    Running aticonfig --px-Xgpu.
    Running switchlibGL.
    Adding/removing fglrx into/from /etc/modules-load.d/catalyst.conf.

Usage:

# pxp_switch_catalyst amd
# pxp_switch_catalyst intel

If you have got problems when you try to run X on Intel's driver you may try to force "UXA" acceleration; just make sure that your xorg.conf for Intel's GPU got Option "AccelMethod" "uxa", like here:

Section "Device"
        Identifier  "Intel Graphics"
        Driver      "intel"
        #Option      "AccelMethod"  "sna"
        Option      "AccelMethod"  "uxa"
        #Option      "AccelMethod"  "xaa"
EndSection

Running two X servers (one using the Intel driver, another one using fglrx) simultaneously

Because fglrx is crash-prone (regarding PowerXpress), it could be a good idea to use the Intel driver in the main X server and have a secondary X server using fglrx when 3D acceleration is needed. However, simply switching to the discrete GPU from the integrated GPU using aticonfig or amdcccle will cause all sorts of weird bugs when starting the second X.

To run two X servers at the same time (each using different drivers), you should firstly set up a fully working X with Catalyst and then move its xorg.conf to a temporary place (for example, /etc/X11/xorg.conf.fglrx. The next time X is started, it will use the Intel driver by default instead of fglrx.

To start a second X server using fglrx, simply move xorg.conf back to the proper place (/etc/X11/xorg.conf) before starting X. This method even allows you to switch between running X sessions. When you are done using fglrx, move xorg.conf somewhere else again.

The only disadvantage of this method is not having 3D acceleration using the Intel driver. 2D acceleration, however, is fully functional. Other than that, this will provide us with a completely stable desktop.
Xorg repositories

Catalyst is notorious for its slow update process. As such, it is common that a new Xorg version is pushed down from upstream that will break compatibility for Catalyst. This means that Catalyst users either have to hold the Xorg packages from updating, or use a backported repository that only contains the Xorg packages that should be hold back. Vi0L0 has stepped in to fulfil this task and provides several backported repositories.

If you want to use pacman to hold back packages from updating, see pacman#Skip package from being upgraded. Packages you should hold back, are:

    xorg-server-*
    xf86-input-*
    xf86-video-*

If you want to use the backported repositories, you have to edit /etc/pacman.conf and add the information of the repository above all other repositories, even above your Catalyst repository, should you use one.
[xorg113]

Catalyst < 13.8 doesn't support xorg-server 1.14.

[xorg113]
Server = http://catalyst.wirephire.com/repo/xorg113/$arch

[xorg112]

Catalyst < 12.10 and Catalyst Legacy do not support xorg-server 1.13.

[xorg112]
Server = http://catalyst.wirephire.com/repo/xorg112/$arch

[xorg111]

Catalyst < 12.6 doesn't support xorg-server 1.12.

[xorg111]
Server = http://catalyst.wirephire.com/repo/xorg111/$arch

Tools
Catalyst-hook

Catalyst-hook is a systemd service that will automatically rebuild the fglrx modules while the system shuts down or reboots, but only if it's necessary (e.g. after an update).

Before using this package make sure that both the base-devel group and the linux-headers package (the one specific to the kernel you use) are installed.

To enable the automatic update, enable the catalyst-hook.service:

# systemctl enable catalyst-hook
# systemctl start catalyst-hook

You can also use this package to build the fglrx module manually. Simply run the catalyst_build_module script after the kernel has been updated:

# catalyst_build_module all

A few more technical details:

The catalyst-hook.service is stopping the systemd "river" and is forcing systemd to wait until catalyst-hook finishes its job.

The catalyst-hook.service is calling the catalyst_build_module check function which checks if fglrx rebuilds are really necessary.

The check function is checking if the fglrx module exists, if it:

    doesn't exist, it will build it;

    does exist, it will compare the two values to be sure that a rebuild is necessary.

These values are md5sums of the /usr/lib/modules/<kernel_version>/build/Module.symvers file (because I, Vi0L0, noticed that this file is unique and different for every kernel's release). The first value is the md5sum of the existing Module.symvers file. The second value is the md5sum of the Module.symvers file which existed in a moment of the fglrx module creation. This value was compiled into the fglrx module by a catalyst_build_module script.

If the values are different, it will compile the new fglrx module.

The check is checking the whole /usr/lib/modules/ directory and building modules for all of the installed kernels if it's necessary. If the build or rebuild isn't necessary, the whole process takes only some milliseconds to complete before it gets killed by systemd.
Catalyst-generator

Catalyst-generator is a package that is able to build and install the fglrx module packed into pacman compliant catalyst-${kernver} packages. The basic difference from Catalyst-hook is that you will have to trigger this command manually, whereas Catalyst-hook will do this automatically at boot when a new kernel got installed.

It creates catalyst-${kernver} packages using makepkg and installs them with pacman. ${kernver} is the kernel version for which each package was built (e.g. catalyst-2.6.35-ARCH package was built for 2.6.35-ARCH kernel).

To build and install catalyst-${kernver} package for a currently booted kernel as an unprivileged user (non-root; safer way), use catalyst_build_module. You will be asked for your root password to proceed to package installation.

A short summary on how to use this package:

    As root: catalyst_build_module remove. This will remove all unused catalyst-{kernver} packages.
    As unprivileged user: catalyst_build_module ${kernver}, where ${kernver} is the version of the kernel to which you just updated. For example: catalyst_build_module 2.6.36-ARCH. You can also build catalyst-${kernver} for all installed kernels by using catalyst_build_module all.
    If you want to remove catalyst-generator, it's best to run this as root before removing catalyst-generator: catalyst_build_module remove_all. This will remove all catalyst-{kernver} packages from the system.

Catalyst-generator isn't able to remove all those catalyst-{kernver} packages automatically while being removed because there can not be more than one instance of pacman running. If you forget to run catalyst_build_module remove_all before using pacman -R catalyst-generator catalyst-generator will tell you which catalyst-{kernver} packages you will have to remove manually after removing catalyst-generator itself.

Catalyst-generator is most safe and KISS-friendly solution because:

    you can use unprivileged user to build the package;
    it is building modules in a fakeroot environment;
    it is not throwing files here and there, pacman always knows where they are;
    all you have to do is to remember to use it

Note: If you see those warnings:

WARNING: Package contains reference to $srcdir

WARNING: '.pkg' is not a valid archive extension.
while building catalyst-{kernver} package, do not be concerned, it's normal.
OpenCL and OpenGL development

Since years AMD is working on tools for OpenCL and OpenGL developement.

Now under the banner of "Heterogeneous Computing" AMD is providing even more of them, fortunately most of their computing tools are available also for Linux.

In the AUR and the [catalyst] repositories you will find packages that represent the most important work from AMD, namely; amdapp-aparapi, amdapp-sdk and amdapp-codexl.

APP shortcut stands for Accelerated Parallel Processing.
amdapp-aparapi

AMD's Aparapi is an API for expressing data parallel workloads in Java and a runtime component capable of converting the Java bytecode of compatible workloads into OpenCL so that it can be executed on a variety of GPU devices. If Aparapi can’t execute on the GPU, it will execute in a Java thread pool.

You can find more information about Aparapi here.
amdapp-sdk (formerly known as amdstream)

The AMD APP Software Development Kit (SDK) is a complete development platform created by AMD to allow you to quickly and easily develop applications accelerated by AMD APP technology. The SDK provides samples, documentation and other materials to quickly get you started leveraging accelerated compute using OpenCL, Bolt, or C++ AMP in your C/C++ application.

Since version 2.8 amdapp-sdk is providing aparapiUtil as well as aparapi's samples. A package is available on the [catalyst] repository; it depends on the amdapp-aparapi package. The AUR's package will let you decide whether you want aparapi's additions or not.

Version 2.8 does not provide Profiler functionality, it has been moved to CodeXL.

You can find more information about AMD APP SDK here.
amdapp-codexl

CodeXL is an OpenCL and OpenGL Debugger and Profiler, with a static OpenCL kernel analyzer. It's a GUI application written atop of the well known gDEBugger and is available only for x86_64 systems.

You can find more informations about CodeXL here. 
