From: Sebastian Kügler <sebas@kde.org>
Date: Sun, 05 Jan 2014 01:10:24 +0000
Subject: Adapt to API changes in ThreadWeaver
X-Git-Url: http://quickgit.kde.org/?p=plasma-framework.git&a=commitdiff&h=160e97cbbae29140f580ea793c92602a4d4b9e8b
---
Adapt to API changes in ThreadWeaver

Reviewed-by: Mirko Böhm <mirko@kde.org>
---


--- a/src/plasma/private/runnerjobs.cpp
+++ b/src/plasma/private/runnerjobs.cpp
@@ -24,13 +24,14 @@
 #include <QDebug>
 
 //#include <Weaver/DebuggingAids.h>
-#include <threadweaver/ThreadWeaver.h>
+#include <threadweaver/Job.h>
+#include <threadweaver/Queue.h>
 
 #include "runnermanager.h"
 #include "plasma/querymatch.h"
 
 using ThreadWeaver::Job;
-using ThreadWeaver::Weaver;
+using ThreadWeaver::Queue;
 
 namespace Plasma {
 
@@ -172,8 +173,8 @@
 }
 
 DelayedJobCleaner::DelayedJobCleaner(const QSet<QSharedPointer<FindMatchesJob> > &jobs, const QSet<AbstractRunner *> &runners)
-    : QObject(Weaver::instance()),
-      m_weaver(Weaver::instance()),
+    : QObject(Queue::instance()),
+      m_weaver(Queue::instance()),
       m_jobs(jobs),
       m_runners(runners)
 {

--- a/src/plasma/private/runnerjobs_p.h
+++ b/src/plasma/private/runnerjobs_p.h
@@ -26,7 +26,7 @@
 
 #include <threadweaver/Job.h>
 #include <threadweaver/QueuePolicy.h>
-#include <threadweaver/ThreadWeaver.h>
+#include <threadweaver/Queue.h>
 #include <QObjectDecorator.h>
 
 #include "abstractrunner.h"
@@ -125,7 +125,7 @@
     void checkIfFinished();
 
 private:
-    ThreadWeaver::Weaver *m_weaver;
+    ThreadWeaver::Queue *m_weaver;
     QSet<QSharedPointer<FindMatchesJob> > m_jobs;
     QSet<AbstractRunner *> m_runners;
 };

--- a/src/plasma/runnermanager.cpp
+++ b/src/plasma/runnermanager.cpp
@@ -38,15 +38,14 @@
 #endif
 
 #include <threadweaver/DebuggingAids.h>
-#include <threadweaver/State.h>
+#include <threadweaver/Queue.h>
 #include <threadweaver/Thread.h>
-#include <threadweaver/ThreadWeaver.h>
 
 #include "private/runnerjobs_p.h"
 #include "pluginloader.h"
 #include "querymatch.h"
 
-using ThreadWeaver::Weaver;
+using ThreadWeaver::Queue;
 using ThreadWeaver::Job;
 
 //#define MEASURE_PREPTIME
@@ -112,8 +111,8 @@
         const int maxThreads = config.readEntry("maxThreads", 16);
         const int numThreads = qMin(maxThreads, 2 + ((numProcs - 1) * 2));
         //qDebug() << "setting up" << numThreads << "threads for" << numProcs << "processors";
-        if (numThreads > Weaver::instance()->maximumNumberOfThreads()) {
-            Weaver::instance()->setMaximumNumberOfThreads(numThreads);
+        if (numThreads > Queue::instance()->maximumNumberOfThreads()) {
+            Queue::instance()->setMaximumNumberOfThreads(numThreads);
         }
         // Limit the number of instances of a single normal speed runner and all of the slow runners
         // to half the number of threads
@@ -353,7 +352,7 @@
             return;
         }
 
-        if (Weaver::instance()->isIdle()) {
+        if (Queue::instance()->isIdle()) {
             searchJobs.clear();
             oldSearchJobs.clear();
         }
@@ -384,13 +383,13 @@
 
     void unblockJobs()
     {
-        if (searchJobs.isEmpty() && Weaver::instance()->isIdle()) {
+        if (searchJobs.isEmpty() && Queue::instance()->isIdle()) {
             oldSearchJobs.clear();
             checkTearDown();
             return;
         }
 
-        Weaver::instance()->reschedule();
+        Queue::instance()->reschedule();
     }
 
     void runnerMatchingSuspended(bool suspended)
@@ -409,12 +408,12 @@
     void startJob(AbstractRunner *runner)
     {
         if ((runner->ignoredTypes() & context.type()) == 0) {
-            QSharedPointer<FindMatchesJob> job(new FindMatchesJob(runner, &context, Weaver::instance()));
+            QSharedPointer<FindMatchesJob> job(new FindMatchesJob(runner, &context, Queue::instance()));
             QObject::connect(job->decorator(), SIGNAL(done(ThreadWeaver::JobPointer)), q, SLOT(jobDone(ThreadWeaver::JobPointer)));
             if (runner->speed() == AbstractRunner::SlowSpeed) {
                 job->setDelayTimer(&delayTimer);
             }
-            Weaver::instance()->enqueue(job);
+            Queue::instance()->enqueue(job);
             searchJobs.insert(job);
         }
     }
@@ -775,11 +774,11 @@
 void RunnerManager::reset()
 {
     // If ThreadWeaver is idle, it is safe to clear previous jobs
-    if (Weaver::instance()->isIdle()) {
+    if (Queue::instance()->isIdle()) {
         d->oldSearchJobs.clear();
     } else {
         for (auto it = d->searchJobs.constBegin(); it != d->searchJobs.constEnd(); ++it) {
-            Weaver::instance()->dequeue((*it));
+            Queue::instance()->dequeue((*it));
         }
         d->oldSearchJobs += d->searchJobs;
     }

From: David Faure <faure@kde.org>
Date: Sun, 05 Jan 2014 11:03:17 +0000
Subject: Adapt to newer new ThreadWeaver includes (e3b4312fe9a2 in threadweaver)
X-Git-Url: http://quickgit.kde.org/?p=plasma-framework.git&a=commitdiff&h=8b5834c28c0ba7b00141d076ef4645c61c621e8b
---
Adapt to newer new ThreadWeaver includes (e3b4312fe9a2 in threadweaver)
---


--- a/src/plasma/private/runnerjobs.cpp
+++ b/src/plasma/private/runnerjobs.cpp
@@ -23,10 +23,6 @@
 
 #include <QDebug>
 
-//#include <Weaver/DebuggingAids.h>
-#include <threadweaver/Job.h>
-#include <threadweaver/Queue.h>
-
 #include "runnermanager.h"
 #include "plasma/querymatch.h"
 

--- a/src/plasma/private/runnerjobs_p.h
+++ b/src/plasma/private/runnerjobs_p.h
@@ -24,10 +24,10 @@
 #include <QMutex>
 #include <QSet>
 
-#include <threadweaver/Job.h>
-#include <threadweaver/QueuePolicy.h>
-#include <threadweaver/Queue.h>
-#include <QObjectDecorator.h>
+#include <ThreadWeaver/Job>
+#include <ThreadWeaver/QueuePolicy>
+#include <ThreadWeaver/Queue>
+#include <ThreadWeaver/QObjectDecorator>
 
 #include "abstractrunner.h"
 

--- a/src/plasma/runnermanager.cpp
+++ b/src/plasma/runnermanager.cpp
@@ -37,9 +37,9 @@
 #include <solid/deviceinterface.h>
 #endif
 
-#include <threadweaver/DebuggingAids.h>
-#include <threadweaver/Queue.h>
-#include <threadweaver/Thread.h>
+#include <ThreadWeaver/DebuggingAids>
+#include <ThreadWeaver/Queue>
+#include <ThreadWeaver/Thread>
 
 #include "private/runnerjobs_p.h"
 #include "pluginloader.h"

